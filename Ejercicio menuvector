#pragma once
#define MAX 100
class Vector
{
private:
	int vec[MAX], n;
public:
	Vector(int _n); // constructor
	~Vector(void); //destructor

	void cargarVector(); //metodos
	void mostrarVector();
	void ordenarascVector();
	void ordenardesVector();
};

#include "StdAfx.h"
#include <iostream>
#include "Vector.h"

using namespace std;

Vector::Vector(int _n)
{
	n=_n;
}


Vector::~Vector(void)
{
}

void Vector::cargarVector(){
	for(int i=0;i<n;i++){
		cout<<"vec["<<i<<"] =" ;
		cin>>vec[i];
	}
}

void Vector::mostrarVector(){
	for(int i=0;i<n;i++){
		cout<<vec[i]<<", ";
	}
	cout<<endl;
}

void Vector::ordenarascVector(){
	int aux;
	for(int i=0; i<(n-1); i++){
		for(int j=i; j<n; j++){
			if(vec[i] > vec[j]){
				aux = vec[i];
				vec[i] = vec[j];
				vec[j] = aux;
			}
		}
	}
}

void Vector::ordenardesVector(){
	int aux;
	for(int i=0; i<(n-1); i++){
		for(int j=i; j<n; j++){
			if(vec[i] < vec[j]){
				aux = vec[i];
				vec[i] = vec[j];
				vec[j] = aux;
			}
		}
	}
}

#include "stdafx.h"
#include <iostream>
#include "conio.h"
#include "Vector.h"  //Declarar el header de la clase

#define MAX 10

using namespace std;

void main(){

	int vec[MAX], n, m, op;

	do {
		cout<<"Ingrese el tamanio del vector : ";
		cin>>n;
	} while ((n>MAX) || (n<=0));
	Vector vector1(n);  // Declarando el objeto vector1 de la clase vector
	do {
		cout<<"Ingrese el tamanio del vector 2 : ";
		cin>>m;
	} while ((m>MAX) || (m<=0));
	Vector vector2(m);  // Declarando el objeto vector1 de la clase vector
	do{
		cout<<"-----       M E N U        -----"<<endl;
		cout<<"|1.- Cargar Vector.            |"<<endl;
		cout<<"|2.- Mostrar Vector.           |"<<endl;
		cout<<"|3.- Ordenar asc Vector.       |"<<endl;
		cout<<"|4.- Ordenar des Vector.       |"<<endl;
		cout<<"|0.- Salir                     |"<<endl;
		cout<<"--------------------------------"<<endl;
		cout<<" Elija una opcion"<<endl;
		cin>>op;
		switch(op){
		case 1:
			vector1.cargarVector();  //Llamar al metodo
			vector2.cargarVector();
			break;
		case 2:
			vector1.mostrarVector();
			vector2.mostrarVector();
			break;
		case 3:
			vector1.ordenarascVector();
			vector2.ordenarascVector();
			break;
		case 4:
			vector1.ordenardesVector();
			vector2.ordenardesVector();
			break;
		case 0: 
			cout<<"Salir"<<endl;
			break;
		default:
			cout<<"Error: Opcion no valida..."<<endl;
			break;
		}
	}while(op!=0);
	getch();
}
