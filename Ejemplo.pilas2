------------.h------------
#pragma once
#include <iostream>
//#include <conio.h>

using namespace std;

/* tipo de dato que contendrá la lista */
typedef char DATA_TYPE;

// declaraci¢n de estructura nodo
struct nodo {
	DATA_TYPE data;
	nodo *next;
};

class StackDin {

    // atributos
    int ITEMS;    /* número de elementos en la lista */
    int ITEMSIZE; /* tamaño de cada elemento */
    nodo *SP;     /* puntero de lectura/escritura */

public:
    // constructor
    StackDin();

    // destructor
    ~StackDin();

    /* agregar componente a la lista */
    DATA_TYPE put(DATA_TYPE valor);

    int empty();


    /* retirar elemento de la lista */
    DATA_TYPE get();
   

}; // fin de la clase StackDin

-----------.cpp-----------------
#include "StdAfx.h"
#include "StackDin.h"


StackDin::StackDin(): SP(NULL), ITEMS(0), ITEMSIZE(sizeof(DATA_TYPE)) {}


StackDin::~StackDin(void)
{
}
  /* agregar componente a la lista */
DATA_TYPE StackDin::put(DATA_TYPE valor)
{
	nodo *temp;

	temp = new nodo;
	if (temp == NULL) return -1;

	temp->data = valor;
	temp->next = SP;
	SP = temp;
	ITEMS ++;
	return valor;
}

int StackDin::empty()
{ return ITEMS == 0; 
}


    /* retirar elemento de la lista */
    DATA_TYPE StackDin::get()
    {
	nodo *temp;
	DATA_TYPE d;

	if ( empty() ) return -1;

	d = SP->data;
	temp = SP->next;
	if (SP) delete SP;
	SP = temp;
	ITEMS --;
	return d;
  }
  
  --------------Main-----------
#include "stdafx.h"
#include "StackDin.h"

void main()
{
    //clrscr();

    StackDin s;
    DATA_TYPE d;

    for (d='A'; d<='Z'; d++) s.put(d);

    while ( ! s.empty() )
	cout << (DATA_TYPE)s.get() << " ";

    cout << "\nPara terminar presione <Enter>...";
    cin.get();
   
}
