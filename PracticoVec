	PRACTICA Nº 10
ARREGLOS (VECTORES )

1.	Hacer un programa para sacar el máximo valor de un vector de valores ya sean reales o enteros.
#pragma once
#include <iostream>
class Ejercicio1
{
  private:
	  int vec[100],n;

  public:
	Ejercicio1(int _n);
	~Ejercicio1(void);
	void cargarvec();
	void vecmax();
	void mostrarvec();
	
};

#include "stdAfx.h"
#include <iostream>
#include "Ejercicio1.h"
#include "conio.h"
Ejercicio::Ejercicio1(int _n)
{
   n=_n
}
~Ejercicio1(void)
{
}
void Ejercicio1::cargarvec(){
	for(int i=0;i<n;i++){
		cout<<"vec["<<i<<"] =";
		cin>>vec[i];
	}
}

void Ejercicio1::vecmax(){
   float mayor;
   int pos;
      mayor=vec[0];
      pos=0;
        for(int f=1;f<n;f++){
            if (vec[f]>mayor){
                mayor=vec[f];
                pos=f;
         }
     }
}

void mostrarvec(){
   for(int i=0;i<n;i++){
	   cout<<vec[i]<<", ";
   }
   cout<<endl;
}

#include "stdafx.h"
#include <iostream>
#include "Ejercicio1.h"
#include "conio.h"
 
using namespace std;

void main()
{
	Ejercicio1 e1;
	e1.vecmax();
	getch();
}
2.	Hacer un programa para sacar el mínimo valor de un vector de valores ya sean reales o enteros.
#pragma once
#include <iostream>
class Ejercicio1
{
  private:
	  int vec[100],n;

  public:
	Ejercicio1(int _n);
	~Ejercicio1(void);
	void cargarvec();
	void vecmax();
	void mostrarvec();
	
};

#include "stdAfx.h"
#include <iostream>
#include "Ejercicio1.h"
#include "conio.h"
Ejercicio2::Ejercicio1(int _n)
{ 
	n=_n;
}


Ejercicio2::~Ejercicio1(void)
{
}

void Ejercicio2::cargarvec(){
	for(int i=0;i<n;i++){
		cout<<"vec["<<i<<"] =";
		cin>>vec[i];
	}
}

void Ejercicio2::vecmax(){
   float menor;
      menor=vec[0];
        for(int f=1;f<n;f++){
            if (vec[f]<menor){
                menor=vec[f];
         }
     }
}

void Ejercicio2:: mostrarvec(){
   for(int i=0;i<n;i++){
	   cout<<vec[i]<<", ";
   }
   cout<<endl;
}

#include "stdafx.h"
#include <iostream>
#include "Ejercicio1.h"
#include "conio.h"
 
using namespace std;

void main()
{
	Ejercicio1 e1;
	e1.vecmax();
	getch();
}

3.	Hacer un programa para sacar el promedio de valores de un vector.
#pragma once

class Promedio
{
  private:
	  int vec[100],n;
  public:
	Promedio(void);
	~Promedio(void);
	void promediovec();
};

#include "StdAfx.h"
#include <iostream>
#include "Promedio.h"

Promedio::Promedio(void)
{
}
Promedio::~Promedio(void)
{
}

void Promedio::promediovec(){
	float prom,s;
	s=0;
	prom=0;
	for(int i=0; i<n;i++){
	  s=s+vec[i];
	  prom=s/n;
	}
}



#include "stdafx.h"
#include <iostream>
#include "Promedio.h"


void main()
{ 
	Promedio p1;
	p1.promediovec();
	cout<<"El promedio es: "<<p1.promediovec<<endline;
}

4.	Hacer un programa para revertir la lista de valores de un vector, en otro vector, es decir se debe mantener el vector original.
#pragma once
#include <iostream>
#include <string>
using namespace std;

// se quiere invertir un vector, pero poniendo el invertido en otro vector
class Ejercicio4
{
private:
	string vec[100]; // vector original
	string invertido[100]; // vector invertido
	int n; // tamano
public:
 Ejercicio4(int _n);
 ~Ejercicio4(void);
 void invertir();
 void leerVector();
 void mostrarOriginal();
 void mostrarInvertido();
 };
 #include "stdAfx.h"
#include <iostream>
#include "Ejercicio4.h"
#include "conio.h"

Ejercicio4::Ejercicio1(int _n)
{ 
	n=_n;
}


Ejercicio4::~Ejercicio1(void)
{
}

void invertir() {

		/*for(int i = n - 1; i >= 0; --i) {
			invertido[n - 1 - i] = vec[i];
		}*/

		for(int i = 0; i < n; ++i) {
			invertido[n - 1 - i] = vec[i];
		}
	}

	void Ejercicio4::leerVector() {
		cout << "Ingrese la cantidad de personas: ";
		cin >> n;

		for(int i = 0; i < n; ++i) {
			cout << "Persona[" << i + 1 << "] = ";
			cin >> vec[i];
		}
	}

	void Ejercicio4::mostrarOriginal() {
		for(int i = 0; i < n; ++i) {
			cout << vec[i] << endl;
		}

		cout << endl << endl;
	}


 #include "stdafx.h"
#include "Ejercicio4.h"


void main()
{
	Ejercicio4 var;
	var.leerVector();
	var.invertir();
	var.mostrarOriginal();
	var.mostrarInvertido();
}
5.	Hacer un programa para determinar si un vector es capicúa, es decir, si el vector revertido es igual al inicial, se dice que el vector es capicúa.
6.	Sacar el promedio de cada tres valores consecutivos en un vector.
P1= A1 + A2 + A3 
P2= A2 + A3 + A4
P3= A3 + A4 + A5

#pragma once
#include <iostream>
using namespace std;


class Ejercicio6
{
private:
	double vec[100]; // vector
	int n; // tamano del vector
public:
  Ejercicio6(int _n);
 ~Ejercicio6(void);
 void leerVector();
 void leerVector();
 };
 
Ejercicio4::Ejercicio1(int _n)
{ 
	n=_n;
}

 #include "stdAfx.h"
#include <iostream>
#include "Ejercicio4.h"
#include "conio.h"

using namespace std;

Ejercicio4::~Ejercicio1(void)
{
}
 
 void leerVector() {
		cout << "Ingrese un tamano para el vector: ";
		cin >> n;

		for(int i = 0; i < n; ++i) {
			cin >> vec[i];
		}
	}

	void leerVector() {

		for(int i = 0; i < n - 2; ++i) { // se recorre uno por uno
			int cnt = 0;
			double suma = 0.0;
			for(int j = i; j < n && cnt < 3; ++j, ++cnt) { // cuenta tres y los suma				//suma += vec[j];
				suma = suma + vec[j];
			}
			double promedio = suma / cnt;
			cout << "P" << i + 1 << " es: " << promedio << endl;
		}
	}
  
#include "stdafx.h"
#include "Ejercicio4.h"


#include "stdafx.h"
#include "Ejercicio6.h"


void main()
{
	Ejercicio6 var;
	var.leerVector();
	var.mostrarPromedioDeA3();
}



7.	Dado un número entero, el programa debe devolver el valor escrito literalmente. Por ejemplo si se da 12 debe devolver 'DOCE'. Hacer esto hasta el valor 20. ¿ Es posible generalizar para 30, 31, 32, ....100,101,... etc. ?.
8.	Dado un vector A de n números reales, obténgase la diferencia más grande entre dos elementos consecutivos de este vector.
9.	Concatenar dos vectores de tamaño n y m respectivamente. [a1,a2,......an;]  [b1,b2,....bm]; concatenado resulta [a1,a2,......an,b1,b2,....bm] con n+m elementos.
10.	Intercalar dos vectores A y B clasificados ascendentemente de tamaño n y m respectivamente en uno solo de tal forma que el resultado sea un vector clasificado.
11.	Hacer un programa que permita contar número de valores negativos, positivos y ceros que hay en un vector.
12.	Hacer un programa para eliminar los  números duplicados de un vector.
13.	Hacer un programa para revertir una lista en el mismo vector.
14.	Hacer un programa para clasificar una lista de valores (entero o realies) en orden ascendente.
15.	Un vector tiene la lista de alumnos y otro vector tiene las notas. Hacer un programa para obtener las tres mejores notas. Sugerencia: Clasificar el vector en orden descendente y luego listar los tres primeros, hay que tener cuidado cuando se intercambia los elementos del vector de alumnos también se debe intercambiar las notas.
16.	Confeccionar en un menú para manejar alumnos con las siguiente funciones: 1) Ingresar un alumno y su nota 2) Listar los alumnos 3) Ordenar alfabéticamente 4) Sacar la mejor nota 5) Sacar el promedio de notas.
17.	Generar los primeros n números de Fibonacci en un vector.
